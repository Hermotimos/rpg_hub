# Generated by Django 4.0.2 on 2022-03-25 08:43

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    # replaces = [('rules', '0001_squashed_0005_auto_20211017_1835'), ('rules', '0002_remove_weapontype_description'), ('rules', '0003_auto_20220116_2236'), ('rules', '0004_auto_20220117_1958'), ('rules', '0005_auto_20220117_2021'), ('rules', '0006_auto_20220118_1844'), ('rules', '0007_skilltype_sorting_name'), ('rules', '0008_auto_20220118_1911'), ('rules', '0009_auto_20220118_1927'), ('rules', '0010_skillgroup_type'), ('rules', '0011_alter_skillgroup_type'), ('rules', '0012_auto_20220119_2218'), ('rules', '0013_alter_factor_name'), ('rules', '0014_alter_factor_name'), ('rules', '0015_perk_cost'), ('rules', '0016_alter_modifier_options'), ('rules', '0017_auto_20220125_2135'), ('rules', '0018_alter_perk_name'), ('rules', '0019_alter_skilllevel_options'), ('rules', '0020_alter_modifier_options'), ('rules', '0021_modifier_value_text'), ('rules', '0022_auto_20220129_0938'), ('rules', '0023_rename_modifiers_perk_modifiers_old'), ('rules', '0024_auto_20220129_1024'), ('rules', '0025_auto_20220129_1132'), ('rules', '0026_auto_20220129_1143'), ('rules', '0027_alter_condition_text'), ('rules', '0028_auto_20220129_1158'), ('rules', '0029_remove_perk_modifiers_old'), ('rules', '0030_auto_20220129_2212'), ('rules', '0031_auto_20220130_0728'), ('rules', '0032_auto_20220130_0739'), ('rules', '0033_alter_modifier_unique_together'), ('rules', '0034_auto_20220131_1911'), ('rules', '0035_auto_20220131_1911'), ('rules', '0036_auto_20220131_1921'), ('rules', '0037_auto_20220204_2309'), ('rules', '0038_plate_comment'), ('rules', '0039_auto_20220210_1707'), ('rules', '0040_alter_perk_modifiers'), ('rules', '0041_bonus_perk_bonuses'), ('rules', '0042_remove_perk_modifiers_delete_conditionalmodifier'), ('rules', '0043_rename_bonus_conditionalmodifier'), ('rules', '0044_rename_bonuses_perk_conditional_modifiers_and_more'), ('rules', '0045_conditionalmodifier_overview_modifier_overview'), ('rules', '0046_alter_modifier_sign'), ('rules', '0047_alter_modifier_sign'), ('rules', '0048_alter_perk_cost'), ('rules', '0049_rename_allowed_profiles_eliteklass_allowees_and_more'), ('rules', '0050_weapon_picture_set'), ('rules', '0051_plate_picture_set'), ('rules', '0052_remove_plate_picture_sets_remove_weapon_picture_sets'), ('rules', '0053_alter_plate_picture_set_alter_weapon_picture_set'), ('rules', '0054_remove_weapon_damage_big_add_and_more'), ('rules', '0055_rename_damage_small_add_weapon_damage_bonus_and_more'), ('rules', '0056_alter_conditionalmodifier_overview_and_more'), ('rules', '0057_alter_conditionalmodifier_options_and_more'), ('rules', '0058_remove_synergy_allowees_synergylevel_skill_levels'), ('rules', '0059_alter_conditionalmodifier_options')]

    initial = True

    dependencies = [
        ('users', '0001_initial_squashed'),
        # ('users', '0007_auto_20210106_1613'),
        ('imaginarion', '0001_initial_squashed'),
        # ('imaginarion', '0012_pictureset'),
        # ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Umiejętność')),
                ('tested_trait', models.CharField(blank=True, max_length=50, null=True, verbose_name='Cecha/Cechy')),
                ('image', models.ImageField(blank=True, null=True, upload_to='site_features_pics')),
                ('sorting_name', models.CharField(blank=True, max_length=101, null=True)),
                ('allowed_profiles', models.ManyToManyField(blank=True, limit_choices_to=models.Q(('status', 'player')), related_name='allowed_skills', to='users.Profile')),
            ],
            options={
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='Synergy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
                ('skills', models.ManyToManyField(related_name='skills', to='rules.Skill')),
            ],
            options={
                'verbose_name': 'Synergy',
                'verbose_name_plural': 'Synergies',
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='BooksSkill',
            fields=[
            ],
            options={
                'verbose_name': 'Księgi',
                'verbose_name_plural': 'Skills - BOOKS',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('rules.skill',),
        ),
        migrations.CreateModel(
            name='TheologySkill',
            fields=[
            ],
            options={
                'verbose_name': 'Teologia',
                'verbose_name_plural': 'Skills - THEOLOGY',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('rules.skill',),
        ),
        migrations.CreateModel(
            name='HistorySkill',
            fields=[
            ],
            options={
                'verbose_name': 'Historia',
                'verbose_name_plural': 'Skills - HISTORY',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('rules.skill',),
        ),
        migrations.CreateModel(
            name='WeaponType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'verbose_name': 'Weapon type',
                'verbose_name_plural': 'Weapon types',
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'verbose_name': 'Profession',
                'verbose_name_plural': 'Professions',
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='EliteProfession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
                ('allowees', models.ManyToManyField(blank=True, limit_choices_to=models.Q(('status__in', ['player', 'gm'])), related_name='allowed_elite_classes', to='users.Profile')),
            ],
            options={
                'verbose_name': 'Elite profession',
                'verbose_name_plural': 'Elite professions',
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='EliteKlass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('start_perks', models.TextField(blank=True, max_length=4000, null=True)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
                ('allowees', models.ManyToManyField(blank=True, limit_choices_to=models.Q(('status__in', ['player', 'gm'])), related_name='allowed_elite_klasses', to='users.Profile')),
                ('elite_profession', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='elite_klasses', to='rules.eliteprofession')),
            ],
            options={
                'verbose_name': 'Elite klass',
                'verbose_name_plural': 'Elite klasses',
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='Klass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('start_perks', models.TextField(blank=True, max_length=4000, null=True)),
                ('lvl_1', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_2', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_3', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_4', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_5', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_6', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_7', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_8', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_9', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_10', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_11', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_12', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_13', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_14', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_15', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_16', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_17', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_18', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_19', models.CharField(blank=True, max_length=500, null=True)),
                ('lvl_20', models.CharField(blank=True, max_length=500, null=True)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
                ('allowees', models.ManyToManyField(blank=True, limit_choices_to=models.Q(('status__in', ['player', 'gm'])), related_name='allowed_klasses', to='users.Profile')),
                ('profession', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='klasses', to='rules.profession')),
            ],
            options={
                'ordering': ['sorting_name'],
                'verbose_name': 'Klass',
                'verbose_name_plural': 'Klasses',
            },
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('damage_dices', models.CharField(blank=True, max_length=10, null=True)),
                ('damage_bonus', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('damage_type', models.CharField(choices=[('K', 'K'), ('S', 'S'), ('O', 'O'), ('K/S', 'K/S'), ('K/O', 'K/O'), ('O/S', 'O/S'), ('K/S/O', 'K/S/O')], max_length=10)),
                ('special', models.TextField(blank=True, max_length=4000, null=True)),
                ('range', models.CharField(blank=True, max_length=100, null=True)),
                ('size', models.CharField(choices=[('M', 'M'), ('Ś', 'Ś'), ('D', 'D')], max_length=5)),
                ('trait', models.CharField(choices=[('Sił', 'Sił'), ('Zrc', 'Zrc'), ('Sił/Zrc', 'Sił/Zrc')], max_length=10)),
                ('avg_price_value', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('avg_price_currency', models.CharField(blank=True, choices=[('m', 'm'), ('ss', 'ss'), ('sz', 'sz'), ('sp', 'sp')], max_length=5, null=True)),
                ('avg_weight', models.DecimalField(decimal_places=1, max_digits=10)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
                ('allowees', models.ManyToManyField(blank=True, limit_choices_to=models.Q(('status__in', ['player', 'gm'])), related_name='allowed_weapons', to='users.Profile')),
                ('weapon_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='weapons', to='rules.weapontype')),
                ('picture_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='weapons', to='imaginarion.pictureset')),
            ],
            options={
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='SkillType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('Powszechne', 'Powszechne'), ('Kapłańskie', 'Kapłańskie'), ('Magiczne', 'Magiczne')], default='Powszechne', max_length=100)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('sorting_name', models.CharField(blank=True, max_length=101, null=True)),
            ],
            options={
                'ordering': ['kind', 'sorting_name'],
            },
        ),
        migrations.AddField(
            model_name='skill',
            name='types',
            field=models.ManyToManyField(blank=True, related_name='skills', to='rules.SkillType'),
        ),
        migrations.CreateModel(
            name='Factor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Modifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='modifiers', to='rules.factor')),
                ('sign', models.CharField(blank=True, choices=[('-', '-'), ('+', '+')], default='+', max_length=1, null=True)),
                ('value_number', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('value_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(1.0)])),
                ('value_text', models.CharField(blank=True, max_length=30, null=True)),
                ('overview', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['factor', 'sign', 'value_number', 'value_percent', 'value_text'],
                'unique_together': {('factor', 'sign', 'value_number'), ('factor', 'sign', 'value_percent'), ('factor', 'sign', 'value_text')},
            },
        ),
        migrations.CreateModel(
            name='SkillGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='skill',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='skills', to='rules.skillgroup'),
        ),
        migrations.AlterField(
            model_name='skill',
            name='name',
            field=models.CharField(max_length=100, unique=True),
        ),
        migrations.AlterField(
            model_name='skill',
            name='tested_trait',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.CreateModel(
            name='SkillKind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('sorting_name', models.CharField(blank=True, max_length=101, null=True)),
            ],
            options={
                'ordering': ['sorting_name'],
            },
        ),
        migrations.AddField(
            model_name='skilltype',
            name='kinds',
            field=models.ManyToManyField(blank=True, related_name='skill_types', to='rules.SkillKind'),
        ),
        migrations.AlterModelOptions(
            name='skilltype',
            options={'ordering': ['sorting_name']},
        ),
        migrations.RemoveField(
            model_name='skilltype',
            name='kind',
        ),
        migrations.AddField(
            model_name='skillgroup',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='skill_groups', to='rules.skilltype'),
        ),
        migrations.CreateModel(
            name='RulesComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
            ],
            options={
                'ordering': ['text'],
            },
        ),
        migrations.CreateModel(
            name='Perk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('cost', models.CharField(blank=True, max_length=200, null=True)),
                ('comments', models.ManyToManyField(blank=True, related_name='perks', to='rules.RulesComment')),
                ('conditional_modifiers', models.ManyToManyField(blank=True, related_name='perks', to='rules.ConditionalModifier')),
            ],
            options={
                'ordering': ['name', 'description'],
            },
        ),
        migrations.CreateModel(
            name='SkillLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('0', '0'), ('1', '1'), ('2', '2'), ('3', '3')], max_length=10)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
                ('acquired_by', models.ManyToManyField(blank=True, related_name='skill_levels', to='users.Profile')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_levels', to='rules.skill')),
                ('perks', models.ManyToManyField(blank=True, related_name='skill_levels', to='rules.Perk')),
            ],
            options={
                'ordering': ['sorting_name', 'id'],
            },
        ),
        migrations.CreateModel(
            name='SynergyLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3')], max_length=10)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
                ('acquired_by', models.ManyToManyField(blank=True, related_name='synergy_levels', to='users.Profile')),
                ('synergy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synergy_levels', to='rules.synergy')),
                ('perks', models.ManyToManyField(blank=True, related_name='synergy_levels', to='rules.Perk')),
                ('skill_levels', models.ManyToManyField(related_name='synergy_levels', to='rules.SkillLevel')),
            ],
            options={
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='CombatType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'ordering': ['text'],
            },
        ),
        migrations.CreateModel(
            name='Shield',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('weight', models.DecimalField(decimal_places=1, max_digits=10)),
                ('sorting_number', models.DecimalField(decimal_places=2, max_digits=3)),
                ('allowees', models.ManyToManyField(blank=True, limit_choices_to=models.Q(('status__in', ['player', 'gm'])), related_name='allowed_shields', to='users.Profile')),
                ('armor_class_bonus', models.PositiveSmallIntegerField(default=1)),
                ('comment', models.TextField(blank=True, max_length=200, null=True)),
                ('picture_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='shields', to='imaginarion.pictureset')),
            ],
            options={
                'ordering': ['sorting_number'],
            },
        ),
        migrations.CreateModel(
            name='Plate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, max_length=4000, null=True)),
                ('armor_class_bonus', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('parrying', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('endurance', models.PositiveSmallIntegerField()),
                ('weight', models.DecimalField(decimal_places=1, max_digits=10)),
                ('mod_pickpocketing', models.SmallIntegerField(blank=True, null=True)),
                ('mod_lockpicking', models.SmallIntegerField(blank=True, null=True)),
                ('mod_sneaking', models.SmallIntegerField(blank=True, null=True)),
                ('mod_hiding', models.SmallIntegerField(blank=True, null=True)),
                ('mod_climbing', models.SmallIntegerField(blank=True, null=True)),
                ('mod_traps', models.SmallIntegerField(blank=True, null=True)),
                ('sorting_number', models.DecimalField(decimal_places=2, max_digits=3)),
                ('allowees', models.ManyToManyField(blank=True, limit_choices_to=models.Q(('status__in', ['player', 'gm'])), related_name='allowed_plates', to='users.Profile')),
                ('comment', models.TextField(blank=True, max_length=200, null=True)),
                ('mod_conning', models.SmallIntegerField(blank=True, null=True)),
                ('mod_listening', models.SmallIntegerField(blank=True, null=True)),
                ('mod_lookout', models.SmallIntegerField(blank=True, null=True)),
                ('mod_running', models.SmallIntegerField(blank=True, null=True)),
                ('mod_swimming', models.SmallIntegerField(blank=True, null=True)),
                ('mod_trailing', models.SmallIntegerField(blank=True, null=True)),
                ('picture_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='plates', to='imaginarion.pictureset')),
            ],
            options={
                'ordering': ['sorting_number'],
            },
        ),
        migrations.RenameField(
            model_name='skill',
            old_name='allowed_profiles',
            new_name='allowees',
        ),
        migrations.AlterField(
            model_name='skill',
            name='allowees',
            field=models.ManyToManyField(blank=True, limit_choices_to=models.Q(('status__in', ['player', 'gm'])), related_name='allowed_skills', to='users.Profile'),
        ),
        migrations.CreateModel(
            name='ConditionalModifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('combat_types', models.ManyToManyField(blank=True, related_name='conditional_modifiers', to='rules.CombatType')),
                ('conditions', models.ManyToManyField(blank=True, related_name='conditional_modifiers', to='rules.Condition')),
                ('modifier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditional_modifiers', to='rules.modifier')),
                ('overview', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['modifier'],
            },
        ),
    ]
