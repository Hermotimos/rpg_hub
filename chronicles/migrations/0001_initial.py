# Generated by Django 3.1 on 2020-11-29 08:28

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('debates', '0001_initial'),
        ('imaginarion', '0001_initial'),
        ('users', '0001_initial'),
        ('toponomikon', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_no', models.IntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=200, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='site_features_pics')),
            ],
            options={
                'verbose_name': 'I. Chapter',
                'ordering': ['chapter_no'],
            },
        ),
        migrations.CreateModel(
            name='Date',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('season', models.CharField(blank=True, choices=[('1', 'Wiosny'), ('2', 'Lata'), ('3', 'Jesieni'), ('4', 'Zimy')], max_length=6, null=True)),
                ('day', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(90)])),
            ],
            options={
                'verbose_name': '- Date',
                'unique_together': {('year', 'season', 'day')},
            },
        ),
        migrations.CreateModel(
            name='GameSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_no', models.IntegerField(null=True)),
                ('title', models.CharField(max_length=200)),
                ('date', models.DateField(blank=True, null=True)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='game_sessions', to='chronicles.chapter')),
            ],
            options={
                'verbose_name': 'II. Game session',
                'ordering': ['game_no'],
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('is_ended', models.BooleanField(default=False)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'verbose_name': '- Thread',
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='TimeUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('name_genetive', models.CharField(blank=True, max_length=256, null=True)),
                ('event_no_in_game', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('description_short', models.TextField(blank=True, null=True)),
                ('description_long', models.TextField(blank=True, null=True)),
                ('date_end', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='timeunits_ended', to='chronicles.date', verbose_name='Date end (year of the encompassing unit)')),
                ('date_start', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='timeunits_started', to='chronicles.date', verbose_name='Date start (year of the encompassing unit)')),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='game_events', to='chronicles.gamesession')),
                ('in_timeunit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='timeunits', to='chronicles.timeunit')),
                ('known_directly', models.ManyToManyField(blank=True, limit_choices_to=models.Q(status__in=['active_player', 'inactive_player', 'dead_player']), related_name='events_known_directly', to='users.Profile')),
                ('known_indirectly', models.ManyToManyField(blank=True, limit_choices_to=models.Q(status__in=['active_player', 'inactive_player', 'dead_player']), related_name='events_known_indirectly', to='users.Profile')),
                ('pictures', models.ManyToManyField(blank=True, related_name='events', to='imaginarion.Picture')),
                ('threads', models.ManyToManyField(blank=True, related_name='events', to='chronicles.Thread')),
                ('locations', models.ManyToManyField(blank=True, related_name='events', to='toponomikon.Location')),
                ('known_long_desc', models.ManyToManyField(blank=True, limit_choices_to=models.Q(status__in=['active_player', 'inactive_player', 'dead_player']), related_name='timeunits_long_desc', to='users.Profile')),
                ('known_short_desc', models.ManyToManyField(blank=True, limit_choices_to=models.Q(status__in=['active_player', 'inactive_player', 'dead_player']), related_name='timeunits_known_short_desc', to='users.Profile')),
                ('date_in_chronology', models.CharField(blank=True, max_length=99, null=True)),
                ('date_in_era', models.CharField(blank=True, max_length=99, null=True)),
                ('date_in_period', models.CharField(blank=True, max_length=99, null=True)),
                ('debates', models.ManyToManyField(blank=True, related_name='events', to='debates.Debate')),
                ('audio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='events', to='imaginarion.audio')),
            ],
            options={
                'verbose_name_plural': '* Time Units (Time spans, History events, Game events)',
                'ordering': ['date_start'],
            },
        ),
        migrations.CreateModel(
            name='Chronology',
            fields=[
            ],
            options={
                'verbose_name_plural': '1 - Chronologies',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('chronicles.timeunit',),
        ),
        migrations.CreateModel(
            name='Era',
            fields=[
            ],
            options={
                'verbose_name': '2 - Era',
                'ordering': ['in_timeunit'],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('chronicles.timeunit',),
        ),
        migrations.CreateModel(
            name='HistoryEvent',
            fields=[
            ],
            options={
                'verbose_name': '4 - History Event',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('chronicles.timeunit',),
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
            ],
            options={
                'verbose_name': '3 - Period',
                'ordering': ['in_timeunit'],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('chronicles.timeunit',),
        ),
        migrations.CreateModel(
            name='GameEvent',
            fields=[
            ],
            options={
                'verbose_name': 'III. Game event',
                'ordering': ['game', 'event_no_in_game'],
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('chronicles.timeunit',),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('chronicles.timeunit',),
        ),
        migrations.CreateModel(
            name='ThreadActive',
            fields=[
            ],
            options={
                'verbose_name': '- Active Thread',
                'verbose_name_plural': '- Threads Active',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('chronicles.thread',),
        ),
        migrations.CreateModel(
            name='ThreadEnded',
            fields=[
            ],
            options={
                'verbose_name': '- Ended Thread',
                'verbose_name_plural': '- Threads Ended',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('chronicles.thread',),
        ),
    ]
