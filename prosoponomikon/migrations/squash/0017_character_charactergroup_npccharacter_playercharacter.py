# Generated by Django 3.1 on 2021-01-17 15:17

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('knowledge', '0006_remove_biographypacket_show_in_prosoponomikon'),
        ('imaginarion', '0002_auto_20210103_1049'),
        ('toponomikon', '0003_auto_20210106_1613'),
        ('users', '0007_auto_20210106_1613'),
        ('prosoponomikon', '0016_auto_20210106_1852'),
    ]

    operations = [
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('sorting_name', models.CharField(blank=True, max_length=250, null=True)),
                ('biography_packets', models.ManyToManyField(blank=True, related_name='characters', to='knowledge.BiographyPacket')),
                ('birth_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='characters_born', to='toponomikon.location')),
                ('dialogue_packets', models.ManyToManyField(blank=True, related_name='characters', to='knowledge.DialoguePacket')),
                ('frequented_locations', models.ManyToManyField(blank=True, related_name='frequented_by_characters', to='toponomikon.Location')),
                ('known_directly', models.ManyToManyField(blank=True, limit_choices_to=models.Q(status='player'), related_name='characters_known_directly', to='users.Profile')),
                ('known_indirectly', models.ManyToManyField(blank=True, limit_choices_to=models.Q(status='player'), related_name='characters_known_indirectly', to='users.Profile')),
                ('pictures', models.ManyToManyField(blank=True, related_name='characters', to='imaginarion.Picture')),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='users.profile')),
            ],
            options={
                'verbose_name': '* CHARACTER',
                'verbose_name_plural': '* CHARACTERS',
                'ordering': ['sorting_name'],
            },
        ),
        migrations.CreateModel(
            name='CharacterGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Nazwa grupy')),
                ('order_no', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Numer porządkowy grupy [opcjonalnie]')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='character_groups_authored', to='users.profile')),
                ('characters', models.ManyToManyField(related_name='character_groups', to='prosoponomikon.Character', verbose_name='Zgrupowane postacie')),
                ('default_knowledge_packets', models.ManyToManyField(blank=True, related_name='character_group_defaults', to='knowledge.KnowledgePacket', verbose_name='Domyślne umiejętności NPC w grupie')),
            ],
            options={
                'verbose_name': '* CHARACTER GROUP',
                'verbose_name_plural': '* CHARACTER GROUPS',
                'ordering': ['order_no', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NPCCharacter',
            fields=[
            ],
            options={
                'verbose_name': '--- NPC',
                'verbose_name_plural': '--- NPCs',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('prosoponomikon.character',),
        ),
        migrations.CreateModel(
            name='PlayerCharacter',
            fields=[
            ],
            options={
                'verbose_name': '--- Player',
                'verbose_name_plural': '--- Players',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('prosoponomikon.character',),
        ),
    ]
