from django.test import TestCase
from django.urls import reverse, resolve
from contact import views
from contact.models import Demand, Plan, DemandAnswer
from users.models import User


class PlansDeleteTest(TestCase):
    def setUp(self):
        self.user1 = User.objects.create_user(username='user1', password='pass1111')
        self.user2 = User.objects.create_user(username='user2', password='pass1111')
        self.plan1 = Plan.objects.create(id=1, author=self.user1)
        self.url = reverse('contact:plans-delete', kwargs={'plan_id': self.plan1.id})

    def test_login_required(self):
        redirect_url = reverse('users:login') + '?next=' + self.url
        response = self.client.get(self.url)
        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)

    def test_redirect_if_unallowed(self):
        self.client.force_login(self.user2)
        redirect_url = reverse('home:dupa')
        response = self.client.get(self.url)
        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)

    def test_404(self):
        self.client.force_login(self.user1)
        url = reverse('contact:plans-delete', kwargs={'plan_id': self.plan1.id + 999})
        response = self.client.get(url)
        self.assertEquals(response.status_code, 404)

    def test_redirect_if_allowed(self):
        self.client.force_login(self.user1)
        redirect_url = reverse('contact:plans-main')
        response = self.client.get(self.url)
        self.assertRedirects(response, redirect_url, status_code=302, target_status_code=200)

    # No test_get - no template generated by mark_undone_view()

    def test_url_resolves_view(self):
        view = resolve(f'/contact/plans/delete:{self.plan1.id}/')
        self.assertEquals(view.func, views.plans_delete_view)
